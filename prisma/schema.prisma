// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource SoccerProject_DB {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Int    @id @default(autoincrement())
  account  String @unique
  password String
  nickName String @unique
  cash     Int    @default(2000)
  rp       Int    @default(1000)

  team            Team[]
  playerInventory PlayerInventory[]
  materials         Material[]
  
  @@map("Account")
}

model Team {
  teamId           Int @id @default(autoincrement())
  accountId        Int @map("account_id")
  playerId         Int
  enhancementLevel Int @default(0)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  player  Player  @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("Team")
}

model Player {
  playerId Int    @id @default(autoincrement())
  name     String @unique
  rarity   String
  speed    Int
  goal     Int
  shot     Int
  defense  Int
  stamina  Int

  playerInventory PlayerInventory[]
  team            Team[]

  @@map("Player")
}

model PlayerInventory {
  id               Int     @id @default(autoincrement())
  accountId        Int
  playerId         Int
  enhancementLevel Int     @default(0)
  player           Player  @relation(fields: [playerId], references: [playerId])
  account          Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, playerId, enhancementLevel])
}

model Material {
  id           Int     @id @default(autoincrement())
  accountId    Int
  materialType String
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}